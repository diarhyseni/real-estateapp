generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  password            String?
  role                String               @default("user")
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?            @updatedAt
  phone               String?
  address             String?
  accounts            Account[]
  passwordResetTokens PasswordResetToken[]
  sessions            Session[]
  properties          Property[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         String     @id @default(cuid())
  name       String
  value      String     @unique
  properties Property[] @relation("CategoryProperties")
}

model Type {
  id         String     @id @default(cuid())
  name       String
  value      String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Property {
  id                 String   @id @default(cuid())
  title              String
  location           String
  price              Float
  currency           String   @default("â‚¬")
  typeId             String?
  categoryId         String
  userId             String?
  bedrooms           Int?
  bathrooms          Int?
  area               Float
  parking            Int?
  isExclusive        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hasBalcony         Boolean  @default(false)
  hasElevator        Boolean  @default(false)
  hasHeating         Boolean  @default(false)
  description        String?
  latitude           String?
  longitude          String?
  characteristics    String[]
  hasAirConditioning Boolean  @default(false)
  hasGarden          Boolean  @default(false)
  hasInternet        Boolean  @default(false)
  hasPool            Boolean  @default(false)
  hasSecurity        Boolean  @default(false)
  images             String[]
  nearbyPlaces       String[]
  areaUnit           String   @default("m2")
  statuses           String[]
  googleMapsIframe   String?  @db.Text
  address            String?
  city               String?
  category           Category @relation("CategoryProperties", fields: [categoryId], references: [id])
  typeRelation       Type?    @relation(fields: [typeId], references: [id])
  user               User?    @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  message   String   @db.Text
  createdAt DateTime @default(now())
  status    String   @default("unread")
  source    String?  // URL where the contact form was submitted
}
